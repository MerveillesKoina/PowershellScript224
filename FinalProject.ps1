#	Using the Get-NetNeighbor cmdlet with exception handling around the cmdlet to handle any errors #	display only the IPv4 address and MAC addresses of the “neighboring” nodesTry {    # Defining a variable called neighbors    $neighbors = Get-NetNeighbor -AddressFamily IPv4        # Let's filter and format output for IPv4 and MAC addresses    $filtered_neighbors = $neighbors | Where-Object { $_.State -eq "Reachable" } | Select-Object IPAddress, LinkLayerAddress        # Displaying the filtered neighbors    $filtered_neighbors}Catch {    Write-Host "Error getting IPv4 addresses and MAC addresses of neighboring nodes: $_"}Get-Help Get-Process -ExamplesEnable-PSRemotingGet-Process -Name v* -ComputerName IT224-DC Get-Process -ComputerName IT224-DC,IT224-MS | Where-Object { $_.Name.StartsWith("v") }Invoke-Command -ComputerName IT224-MS, IT224-DC -ScriptBlock {Get-Process -Name v*}Invoke-Command -ComputerName IT224-DC -ScriptBlock {Get-Process -Name v*}$sb1 = {Get-Process | Where-Object{ $_.Name.StartsWith("v") } }Invoke-Command -ComputerName IT224-MS, IT224-DC -ScriptBlock $sb1Enable-PSRemoting# Let's remote into DC using PSRemotingEnter-PSSession -ComputerName IT224-DC# Running an AD cmdlet to display all the in the domain# We need only to display the name and hostname of those computers.Get-ADComputer -Filter * -Property Name | Select -Property Name,DNSHostName# Creating a persistent session to DCNew-PSSession -ComputerName IT224-DC -Name mySession -SessionOption (New-PSSessionOption -IdleTimeout 7200000 -OperationTimeout 7200000)Enter-PSSession -Name mySession# Define a variable called MyOUs that will store the OU's name$MyOUs = "PolisMassa", "Rishi", "Mimban", "Mantell"#Using the foreach loop foreach ($OU in $MyOUs) {    New-ADOrganizationalUnit -Name $OU -Path "DC=mydomain, DC=local"}#Get-ADOrganizationalUnit -Filter 'Name -like "*"' | select Name, DistinguishedName# Creating domain user for each OUNew-ADUser -Name "The S. Ith" -Path "OU=PolisMassa,DC=mydomain,DC=local"New-ADUser -Name "Luke S. Lywalker" -Path "OU=Rishi,DC=mydomain,DC=local"New-ADUser -Name "Ben Dover" -Path "OU=Mantell,DC=mydomain,DC=local"New-ADUser -Name "Darth V. Ader" -Path "OU=Mimban,DC=mydomain,DC=local"# Using the Get-ChildItem find all the files that were modified withing the last 2 days.Get-Childitem -Path "C:\scripts" -recurse | where-Object {$_.Lastwritetime -gt (get-date).addDays(-2)}